MainActivity.java

package com.dataflair.ticgame;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {


    private int grid_size;
    TableLayout gameBoard;
    TextView txt_turn;
    char [][] my_board;
    char turn;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        grid_size = Integer.parseInt(getString(R.string.size_of_board));
        my_board = new char [grid_size][grid_size];
        gameBoard = (TableLayout) findViewById(R.id.mainBoard);
        txt_turn = (TextView) findViewById(R.id.turn);

        resetBoard();
        txt_turn.setText("Turn: "+turn);

        for(int i = 0; i< gameBoard.getChildCount(); i++){
            TableRow row = (TableRow) gameBoard.getChildAt(i);
            for(int j = 0; j<row.getChildCount(); j++){
                TextView tv = (TextView) row.getChildAt(j);
                tv.setText(R.string.none);
                tv.setOnClickListener(Move(i, j, tv));
            }
        }

        Button reset_btn = (Button) findViewById(R.id.reset);
        reset_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent current = getIntent();
                finish();
                startActivity(current);
            }
        });
    }

    protected void resetBoard(){
        turn = 'X';
        for(int i = 0; i< grid_size; i++){
            for(int j = 0; j< grid_size; j++){
                my_board[i][j] = ' ';
            }
        }
    }

    protected int gameStatus(){

        //0 Continue
        //1 X Wins
        //2 O Wins
        //-1 Draw

        int rowX = 0, colX = 0, rowO = 0, colO = 0;
        for(int i = 0; i< grid_size; i++){
            if(check_Row_Equality(i,'X'))
                return 1;
            if(check_Column_Equality(i, 'X'))
                return 1;
            if(check_Row_Equality(i,'O'))
                return 2;
            if(check_Column_Equality(i,'O'))
                return 2;
            if(check_Diagonal('X'))
                return 1;
            if(check_Diagonal('O'))
                return 2;
        }

        boolean boardFull = true;
        for(int i = 0; i< grid_size; i++){
            for(int j = 0; j< grid_size; j++){
                if(my_board[i][j]==' ')
                    boardFull = false;
            }
        }
        if(boardFull)
            return -1;
        else return 0;
    }

    protected boolean check_Diagonal(char player){
        int count_Equal1 = 0,count_Equal2 = 0;
        for(int i = 0; i< grid_size; i++)
            if(my_board[i][i]==player)
                count_Equal1++;
        for(int i = 0; i< grid_size; i++)
            if(my_board[i][grid_size -1-i]==player)
                count_Equal2++;
        if(count_Equal1== grid_size || count_Equal2== grid_size)
            return true;
        else return false;
    }

    protected boolean check_Row_Equality(int r, char player){
        int count_Equal=0;
        for(int i = 0; i< grid_size; i++){
            if(my_board[r][i]==player)
                count_Equal++;
        }

        if(count_Equal== grid_size)
            return true;
        else
            return false;
    }

    protected boolean check_Column_Equality(int c, char player){
        int count_Equal=0;
        for(int i = 0; i< grid_size; i++){
            if(my_board[i][c]==player)
                count_Equal++;
        }

        if(count_Equal== grid_size)
            return true;
        else
            return false;
    }

    protected boolean Cell_Set(int r, int c){
        return !(my_board[r][c]==' ');
    }

    protected void stopMatch(){
        for(int i = 0; i< gameBoard.getChildCount(); i++){
            TableRow row = (TableRow) gameBoard.getChildAt(i);
            for(int j = 0; j<row.getChildCount(); j++){
                TextView tv = (TextView) row.getChildAt(j);
                tv.setOnClickListener(null);
            }
        }
    }

    View.OnClickListener Move(final int r, final int c, final TextView tv){

        return new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(!Cell_Set(r,c)) {
                    my_board[r][c] = turn;
                    if (turn == 'X') {
                        tv.setText(R.string.X);
                        turn = 'O';
                    } else if (turn == 'O') {
                        tv.setText(R.string.O);
                        turn = 'X';
                    }
                    if (gameStatus() == 0) {
                        txt_turn.setText("Turn: Player " + turn);
                    }
                    else if(gameStatus() == -1){
                        txt_turn.setText("This is a Draw match");
                        stopMatch();
                    }
                    else{
                        txt_turn.setText(turn+" Loses!");
                        stopMatch();
                    }
                }
                else{
                    txt_turn.setText(txt_turn.getText()+" Choose an Empty Call");
                }
            }
        };
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_board, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
}

activity_main.xml

<?xml version="1.0"?>
    <LinearLayout
    tools:context=".MainActivity"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:orientation="vertical"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:layout_height="match_parent"
    android:layout_width="match_parent"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:android="http://schemas.android.com/apk/res/android">


        <TableLayout
            android:id="@+id/mainBoard"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="top|center"
            android:clickable="true"
            android:gravity="center"
            android:layout_marginTop="55dp"
            android:nestedScrollingEnabled="false"
            android:padding="10dp">
            <TableRow
                android:id="@+id/row0"
                style="@style/TableRow"
                android:layout_width="match_parent"
                android:layout_height="match_parent">

             <TextView
                 style="@style/LeftCell"
                 android:width="50dp"
                 android:layout_column="0"></TextView>

                <TextView
                    style="@style/MiddleCell"
                    android:width="50dp"
                    android:layout_column="1"></TextView>

                <TextView
                    style="@style/RightCell"
                    android:width="50dp"
                    android:layout_column="2"></TextView>

            </TableRow>

            <TableRow
                android:id="@+id/row1"
                style="@style/TableRow"
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <TextView
                    style="@style/LeftCell"
                    android:width="50dp"
                    android:layout_column="0"></TextView>

                <TextView
                    style="@style/MiddleCell"
                    android:width="50dp"
                    android:layout_column="1"></TextView>

                <TextView

                    style="@style/RightCell"
                    android:width="50dp"
                    android:layout_column="2"
                    ></TextView>

            </TableRow>

            <TableRow
                android:id="@+id/row2"
                style="@style/TableRow"
                android:layout_width="match_parent"
                android:layout_height="match_parent">

                <TextView
                    style="@style/LeftCell"
                    android:width="50dp"
                    android:layout_column="0"></TextView>

                <TextView
                    style="@style/MiddleCell"
                    android:width="50dp"
                    android:layout_column="1"></TextView>

                <TextView
                    style="@style/RightCell"
                    android:width="50dp"
                    android:layout_column="2"></TextView>

            </TableRow>

        </TableLayout>

        <TextView android:layout_height="wrap_content"
            android:layout_width="fill_parent"
            android:id="@+id/turn"
            android:padding="10dp"
            android:layout_marginTop="50dp"
            android:gravity="left"
            android:textColor="@color/black"
            android:fontFamily="sans-serif-medium"
            android:textSize="24dp"
            android:text="          Turn:  "/>

    <Button
        android:id="@+id/reset"
        android:layout_marginTop="10dp"
        android:layout_marginLeft="132dp"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="   Restart   " />

</LinearLayout>

Under values folder
strings.xml
<resources>
    <string name="action_settings">Settings</string>
    <string name="app_name"> TicTacToe Mini Project</string>
    <string name="size_of_board">3</string>
    <string name="X">" X "</string>
    <string name="O">" O "</string>
    <string name="none">" "</string>
</resources>

styles.xml
<resources>
    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">@color/colorPrimary</item>
        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
        <item name="colorAccent">@color/colorAccent</item>
    </style>

    <style name="TableRow">
    <item name="android:layout_width">50dp</item>
    <item name="android:layout_height">70dp</item>
    <item name="android:background">@color/black</item>
    <item name="android:gravity">center_horizontal</item>
    <item name="android:clickable">true</item>
</style>

     <style name="Cell">
    <item name="android:layout_width">50dp</item>
    <item name="android:layout_height">70dp</item>
    <item name="android:layout_gravity">center</item>
    <item name="android:gravity">center</item>
    <item name="android:textSize">30dp</item>

    <item name="android:background">@color/white</item>
    <item name="android:maxWidth">100dp</item>
    <item name="android:text">"@string/none"</item>
    <item name="android:clickable">true</item>
</style>
    <style parent="@style/Cell" name="LeftCell">
    <item name="android:layout_marginLeft">2dp</item>
    <item name="android:layout_marginTop">2dp</item>
    <item name="android:layout_marginRight">1dp</item>
    <item name="android:layout_marginBottom">2dp</item>
</style>
    <style parent="@style/Cell" name="MiddleCell">
    <item name="android:layout_marginLeft">1dp</item>
   <item name="android:layout_marginTop">2dp</item>
    <item name="android:layout_marginRight">1dp</item>
    <item name="android:layout_marginBottom">2dp</item>
</style>
    <style parent="@style/Cell" name="RightCell">
    <item name="android:layout_marginLeft">1dp</item>
    <item name="android:layout_marginTop">2dp</item>
    <item name="android:layout_marginRight">2dp</item>
    <item name="android:layout_marginBottom">2dp</item>
</style>
</resources>

colors.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <color name="white">#FFFFFF</color>  <color name="colorPrimary">#0CB3A3</color>
    <color name="colorPrimaryDark">#137365</color>
    <color name="colorAccent">#FFE53B</color>
    <color name="maroon">#800000</color>
    <color name="teal">#008080</color>
    <color name="green">#008000</color>
    <color name="blue">#0000FF</color>
    <color name="navy">#000080</color>
    <color name="black">#09534C</color>

</resources>

dimens.xml
<?xml version="1.0" encoding="utf-8"?>
<resources><!-- Default screen margins, per the Android Design guidelines. -->
    <dimen name="activity_horizontal_margin">16dp</dimen>

    <dimen name="activity_vertical_margin">16dp</dimen>

</resources>

v24/ic_launcher_foreground.xml
path drawable-v24/ic_launcher_foreground.xml
path C:\Users\91890\AndroidStudioProjects\ticgame\app\src\main\res\drawable-v24\ic_launcher_foreground.xml

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
